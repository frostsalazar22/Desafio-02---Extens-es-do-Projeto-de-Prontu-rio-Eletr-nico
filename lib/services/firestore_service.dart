import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/prontuario.dart';

class FirestoreService {
  // Refer√™ncia fortemente tipada √† cole√ß√£o "prontuarios"
  final CollectionReference<Map<String, dynamic>> _prontuarios =
      FirebaseFirestore.instance.collection('prontuarios');

  /// üü¢ Adiciona um novo prontu√°rio no Firestore
  Future<void> adicionarProntuario(Prontuario prontuario) async {
    try {
      await _prontuarios.add(prontuario.toMap());
      // ignore: avoid_print
      print('‚úÖ [Firestore] Prontu√°rio adicionado com sucesso!');
    } on FirebaseException catch (e) {
      print('‚ùå [Firestore] Erro Firebase ao adicionar prontu√°rio: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå [Firestore] Erro desconhecido ao adicionar prontu√°rio: $e');
      rethrow;
    }
  }

  /// üîµ Retorna um stream com todos os prontu√°rios em tempo real (ordenados por data)
  Stream<List<Prontuario>> listarProntuarios() {
    return _prontuarios.orderBy('data', descending: true).snapshots().map(
      (snapshot) {
        return snapshot.docs.map((doc) {
          try {
            return Prontuario.fromMap(doc.id, doc.data());
          } catch (e) {
            print('‚ö†Ô∏è [Firestore] Erro ao converter documento ${doc.id}: $e');
            return Prontuario(
              id: doc.id,
              paciente: 'Desconhecido',
              descricao: 'Erro ao ler dados',
              data: DateTime.now(),
            );
          }
        }).toList();
      },
    );
  }

  /// üü° Retorna um √∫nico prontu√°rio pelo ID (√∫til para edi√ß√£o)
  Future<Prontuario?> getProntuarioPorId(String id) async {
    try {
      final doc = await _prontuarios.doc(id).get();
      if (!doc.exists || doc.data() == null) return null;
      return Prontuario.fromMap(doc.id, doc.data()!);
    } catch (e) {
      print('‚ùå [Firestore] Erro ao buscar prontu√°rio $id: $e');
      return null;
    }
  }

  /// üü† Atualiza um prontu√°rio existente (para uso futuro)
  Future<void> updateProntuario(String id, Prontuario prontuario) async {
    try {
      await _prontuarios.doc(id).update(prontuario.toMap());
      print('‚úèÔ∏è [Firestore] Prontu√°rio $id atualizado com sucesso.');
    } on FirebaseException catch (e) {
      print('‚ùå [Firestore] Erro Firebase ao atualizar prontu√°rio: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå [Firestore] Erro desconhecido ao atualizar prontu√°rio: $e');
      rethrow;
    }
  }

  /// üî¥ Deleta um prontu√°rio pelo ID do documento
  Future<void> deletarProntuario(String id) async {
    try {
      await _prontuarios.doc(id).delete();
      print('üóëÔ∏è [Firestore] Prontu√°rio $id deletado com sucesso.');
    } on FirebaseException catch (e) {
      print('‚ùå [Firestore] Erro Firebase ao deletar prontu√°rio: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå [Firestore] Erro desconhecido ao deletar prontu√°rio: $e');
      rethrow;
    }
  }
}
