prontuario_flutter/
‚îÇ
‚îú‚îÄ‚îÄ android/
‚îÇ   ‚îî‚îÄ‚îÄ app/
‚îÇ       ‚îî‚îÄ‚îÄ google-services.json              # arquivo baixado do Firebase
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ main.dart                             # inicializa√ß√£o do app e Firebase
‚îÇ   ‚îú‚îÄ‚îÄ firebase_options.dart                 # configura√ß√µes autom√°ticas do Firebase
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ prontuario.dart                   # classe de modelo de dados
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ firestore_service.dart            # camada de integra√ß√£o com o Firestore
‚îÇ   ‚îî‚îÄ‚îÄ screens/
‚îÇ       ‚îú‚îÄ‚îÄ prontuario_list_screen.dart       # tela que lista todos os prontu√°rios
‚îÇ       ‚îî‚îÄ‚îÄ formulario_prontuario_screen.dart # tela para adicionar novo prontu√°rio
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îî‚îÄ‚îÄ widget_test.dart                      # arquivo de teste padr√£o do Flutter
‚îÇ
‚îú‚îÄ‚îÄ pubspec.yaml                              # depend√™ncias do projeto





codigos
google-services.json
(
  {
  "project_info": {
    "project_number": "292364974425",
    "project_id": "prontuario-flutter",
    "storage_bucket": "prontuario-flutter.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:292364974425:android:05607af3572eb3472a3448",
        "android_client_info": {
          "package_name": "com.example.flutter_firebase"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyCY_v0W904VvC5tOTA9XAefyjoLsSSsZ50"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:292364974425:android:16347a679b0906792a3448",
        "android_client_info": {
          "package_name": "com.pontuario.app"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyCY_v0W904VvC5tOTA9XAefyjoLsSSsZ50"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}
)
main.dart
(
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'screens/prontuario_list_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Prontu√°rio Eletr√¥nico',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green),
      ),
      home: ProntuarioListScreen(), // ‚úÖ Removido o const aqui
    );
  }
}

)

firebase_options.dart
(
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyC8Z0vVBeCY8JF2mCB0rld7-ykh6Ej9TLc',
    appId: '1:292364974425:web:d4c09fb2ac511ad92a3448',
    messagingSenderId: '292364974425',
    projectId: 'prontuario-flutter',
    authDomain: 'prontuario-flutter.firebaseapp.com',
    storageBucket: 'prontuario-flutter.firebasestorage.app',
    measurementId: 'G-VYXKBSXJGY',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCY_v0W904VvC5tOTA9XAefyjoLsSSsZ50',
    appId: '1:292364974425:android:05607af3572eb3472a3448',
    messagingSenderId: '292364974425',
    projectId: 'prontuario-flutter',
    storageBucket: 'prontuario-flutter.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyA01Brr_SK5R8Wq_E2wjWy79d2fSjOFiMQ',
    appId: '1:292364974425:ios:9f13dc610bfe521d2a3448',
    messagingSenderId: '292364974425',
    projectId: 'prontuario-flutter',
    storageBucket: 'prontuario-flutter.firebasestorage.app',
    iosBundleId: 'com.example.flutterFirebase',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyA01Brr_SK5R8Wq_E2wjWy79d2fSjOFiMQ',
    appId: '1:292364974425:ios:9f13dc610bfe521d2a3448',
    messagingSenderId: '292364974425',
    projectId: 'prontuario-flutter',
    storageBucket: 'prontuario-flutter.firebasestorage.app',
    iosBundleId: 'com.example.flutterFirebase',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyC8Z0vVBeCY8JF2mCB0rld7-ykh6Ej9TLc',
    appId: '1:292364974425:web:60ebea2ab22e9f572a3448',
    messagingSenderId: '292364974425',
    projectId: 'prontuario-flutter',
    authDomain: 'prontuario-flutter.firebaseapp.com',
    storageBucket: 'prontuario-flutter.firebasestorage.app',
    measurementId: 'G-YXS39MXX3F',
  );
}

)

prontuario.dart
(
  class Prontuario {
  String? id;
  final String nomeCompleto;
  final DateTime dataNascimento;
  final String sexo;
  final String cpf;
  final String endereco;
  final String telefone;
  final String email;
  final String convenio;
  final String numeroCarteirinha;
  final String alergias;
  final String doencasPreExistentes;
  final String medicamentosEmUso;
  final String descricao;
  final DateTime data;

  Prontuario({
    this.id,
    required this.nomeCompleto,
    required this.dataNascimento,
    required this.sexo,
    required this.cpf,
    required this.endereco,
    required this.telefone,
    required this.email,
    required this.convenio,
    required this.numeroCarteirinha,
    required this.alergias,
    required this.doencasPreExistentes,
    required this.medicamentosEmUso,
    required this.descricao,
    required this.data,
  });

  Map<String, dynamic> toMap() {
    return {
      'nomeCompleto': nomeCompleto,
      'dataNascimento': dataNascimento.toIso8601String(),
      'sexo': sexo,
      'cpf': cpf,
      'endereco': endereco,
      'telefone': telefone,
      'email': email,
      'convenio': convenio,
      'numeroCarteirinha': numeroCarteirinha,
      'alergias': alergias,
      'doencasPreExistentes': doencasPreExistentes,
      'medicamentosEmUso': medicamentosEmUso,
      'descricao': descricao,
      'data': data.toIso8601String(),
    };
  }

  factory Prontuario.fromMap(String id, Map<String, dynamic> map) {
    return Prontuario(
      id: id,
      nomeCompleto: map['nomeCompleto'] ?? '',
      dataNascimento: DateTime.parse(map['dataNascimento']),
      sexo: map['sexo'] ?? '',
      cpf: map['cpf'] ?? '',
      endereco: map['endereco'] ?? '',
      telefone: map['telefone'] ?? '',
      email: map['email'] ?? '',
      convenio: map['convenio'] ?? '',
      numeroCarteirinha: map['numeroCarteirinha'] ?? '',
      alergias: map['alergias'] ?? '',
      doencasPreExistentes: map['doencasPreExistentes'] ?? '',
      medicamentosEmUso: map['medicamentosEmUso'] ?? '',
      descricao: map['descricao'] ?? '',
      data: DateTime.parse(map['data']),
    );
  }
}

)
firestore_service.dart
(
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/prontuario.dart';

class FirestoreService {
  // Refer√™ncia √† cole√ß√£o "prontuarios" no Firestore
  final CollectionReference<Map<String, dynamic>> _prontuarios =
      FirebaseFirestore.instance.collection('prontuarios');

  /// üü¢ Adiciona um novo prontu√°rio no Firestore
  Future<void> adicionarProntuario(Prontuario prontuario) async {
    try {
      await _prontuarios.add(prontuario.toMap());
      // ignore: avoid_print
      print('‚úÖ [Firestore] Prontu√°rio adicionado com sucesso!');
    } on FirebaseException catch (e) {
      print('‚ùå [Firestore] Erro Firebase ao adicionar prontu√°rio: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå [Firestore] Erro desconhecido ao adicionar prontu√°rio: $e');
      rethrow;
    }
  }

  /// üîµ Retorna um stream com todos os prontu√°rios em tempo real (ordenados por data)
  Stream<List<Prontuario>> listarProntuarios() {
    return _prontuarios.orderBy('data', descending: true).snapshots().map(
      (snapshot) {
        return snapshot.docs.map((doc) {
          try {
            return Prontuario.fromMap(doc.id, doc.data());
          } catch (e) {
            print('‚ö†Ô∏è [Firestore] Erro ao converter documento ${doc.id}: $e');
            // Retorna um registro "inv√°lido" para evitar crash da lista
            return Prontuario(
              id: doc.id,
              nomeCompleto: 'Desconhecido',
              dataNascimento: DateTime(2000, 1, 1),
              sexo: '',
              cpf: '',
              endereco: '',
              telefone: '',
              email: '',
              convenio: '',
              numeroCarteirinha: '',
              alergias: '',
              doencasPreExistentes: '',
              medicamentosEmUso: '',
              descricao: 'Erro ao ler dados',
              data: DateTime.now(),
            );
          }
        }).toList();
      },
    );
  }

  /// üü° Retorna um √∫nico prontu√°rio pelo ID (para visualiza√ß√£o ou edi√ß√£o)
  Future<Prontuario?> getProntuarioPorId(String id) async {
    try {
      final doc = await _prontuarios.doc(id).get();
      if (!doc.exists || doc.data() == null) return null;
      return Prontuario.fromMap(doc.id, doc.data()!);
    } catch (e) {
      print('‚ùå [Firestore] Erro ao buscar prontu√°rio $id: $e');
      return null;
    }
  }

  /// üü† Atualiza um prontu√°rio existente
  Future<void> updateProntuario(String id, Prontuario prontuario) async {
    try {
      await _prontuarios.doc(id).update(prontuario.toMap());
      print('‚úèÔ∏è [Firestore] Prontu√°rio $id atualizado com sucesso.');
    } on FirebaseException catch (e) {
      print('‚ùå [Firestore] Erro Firebase ao atualizar prontu√°rio: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå [Firestore] Erro desconhecido ao atualizar prontu√°rio: $e');
      rethrow;
    }
  }

  /// üî¥ Deleta um prontu√°rio pelo ID
  Future<void> deletarProntuario(String id) async {
    try {
      await _prontuarios.doc(id).delete();
      print('üóëÔ∏è [Firestore] Prontu√°rio $id deletado com sucesso.');
    } on FirebaseException catch (e) {
      print('‚ùå [Firestore] Erro Firebase ao deletar prontu√°rio: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå [Firestore] Erro desconhecido ao deletar prontu√°rio: $e');
      rethrow;
    }
  }

  /// üîç (Opcional) Pesquisa por nome do paciente
  Stream<List<Prontuario>> buscarPorNome(String nome) {
    return _prontuarios
        .where('nomeCompleto', isGreaterThanOrEqualTo: nome)
        .where('nomeCompleto', isLessThanOrEqualTo: '$nome\uf8ff')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Prontuario.fromMap(doc.id, doc.data()))
            .toList());
  }

  /// üìä (Opcional) Conta o total de prontu√°rios registrados
  Future<int> contarProntuarios() async {
    try {
      final snapshot = await _prontuarios.get();
      return snapshot.size;
    } catch (e) {
      print('‚ö†Ô∏è [Firestore] Erro ao contar prontu√°rios: $e');
      return 0;
    }
  }
}

)
prontuario_list_screen.dart
(
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/prontuario.dart';
import '../services/firestore_service.dart';
import 'formulario_prontuario_screen.dart';

class ProntuarioListScreen extends StatelessWidget {
  final FirestoreService firestoreService = FirestoreService();

  ProntuarioListScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final dateFormat = DateFormat('dd/MM/yyyy HH:mm');

    return Scaffold(
      appBar: AppBar(
        title: const Text('Prontu√°rios'),
        backgroundColor: Colors.green,
      ),
      body: StreamBuilder<List<Prontuario>>(
        stream: firestoreService.listarProntuarios(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(
              child: Text(
                'Erro ao carregar os prontu√°rios:\n${snapshot.error}',
                textAlign: TextAlign.center,
                style: const TextStyle(color: Colors.red),
              ),
            );
          }

          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          final prontuarios = snapshot.data ?? [];

          if (prontuarios.isEmpty) {
            return const Center(
              child: Text(
                'Nenhum prontu√°rio cadastrado ainda.',
                style: TextStyle(fontSize: 16, color: Colors.grey),
              ),
            );
          }

          return ListView.builder(
            itemCount: prontuarios.length,
            itemBuilder: (context, index) {
              final p = prontuarios[index];
              final dataCriacao = dateFormat.format(p.data);
              final idade = DateTime.now().year - p.dataNascimento.year;

              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                elevation: 3,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: ListTile(
                  leading: CircleAvatar(
                    backgroundColor: Colors.green.shade100,
                    child: const Icon(Icons.person, color: Colors.green),
                  ),
                  title: Text(
                    p.nomeCompleto,
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                  subtitle: Padding(
                    padding: const EdgeInsets.only(top: 6.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Idade: $idade anos',
                          style: const TextStyle(color: Colors.black87),
                        ),
                        if (p.convenio.isNotEmpty)
                          Text('Conv√™nio: ${p.convenio}',
                              style: const TextStyle(color: Colors.black87)),
                        if (p.alergias.isNotEmpty)
                          Text('Alergias: ${p.alergias}',
                              style: const TextStyle(color: Colors.black54)),
                        Text(
                          'üìÖ Criado em: $dataCriacao',
                          style: const TextStyle(color: Colors.black54),
                        ),
                      ],
                    ),
                  ),
                  isThreeLine: true,
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.redAccent),
                    onPressed: () async {
                      final confirmar = await showDialog<bool>(
                        context: context,
                        builder: (ctx) => AlertDialog(
                          title: const Text('Excluir prontu√°rio'),
                          content: Text(
                            'Deseja realmente excluir o prontu√°rio de "${p.nomeCompleto}"?',
                          ),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.pop(ctx, false),
                              child: const Text('Cancelar'),
                            ),
                            TextButton(
                              onPressed: () => Navigator.pop(ctx, true),
                              child: const Text(
                                'Excluir',
                                style: TextStyle(color: Colors.redAccent),
                              ),
                            ),
                          ],
                        ),
                      );

                      if (confirmar == true) {
                        await firestoreService.deletarProntuario(p.id!);
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                                'Prontu√°rio de ${p.nomeCompleto} exclu√≠do com sucesso!'),
                            backgroundColor: Colors.redAccent,
                          ),
                        );
                      }
                    },
                  ),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.green,
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => const FormularioProntuarioScreen(),
            ),
          );
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

)
formulario_prontuario_screen.dart
(
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/prontuario.dart';
import '../services/firestore_service.dart';

class FormularioProntuarioScreen extends StatefulWidget {
  const FormularioProntuarioScreen({super.key});

  @override
  State<FormularioProntuarioScreen> createState() =>
      _FormularioProntuarioScreenState();
}

class _FormularioProntuarioScreenState
    extends State<FormularioProntuarioScreen> {
  final _formKey = GlobalKey<FormState>();

  // Controladores dos campos
  final _nomeController = TextEditingController();
  final _dataNascimentoController = TextEditingController();
  String _sexoSelecionado = 'Masculino';
  final _cpfController = TextEditingController();
  final _enderecoController = TextEditingController();
  final _telefoneController = TextEditingController();
  final _emailController = TextEditingController();
  final _convenioController = TextEditingController();
  final _numeroCarteirinhaController = TextEditingController();
  final _alergiasController = TextEditingController();
  final _doencasController = TextEditingController();
  final _medicamentosController = TextEditingController();
  final _descricaoController = TextEditingController();

  final DateFormat _dateFormat = DateFormat('dd/MM/yyyy');

  Future<void> _salvar() async {
    if (_formKey.currentState!.validate()) {
      try {
        final dataNasc = _dateFormat.parse(_dataNascimentoController.text);

        final novoProntuario = Prontuario(
          nomeCompleto: _nomeController.text,
          dataNascimento: dataNasc,
          sexo: _sexoSelecionado,
          cpf: _cpfController.text,
          endereco: _enderecoController.text,
          telefone: _telefoneController.text,
          email: _emailController.text,
          convenio: _convenioController.text,
          numeroCarteirinha: _numeroCarteirinhaController.text,
          alergias: _alergiasController.text,
          doencasPreExistentes: _doencasController.text,
          medicamentosEmUso: _medicamentosController.text,
          descricao: _descricaoController.text,
          data: DateTime.now(),
        );

        await FirestoreService().adicionarProntuario(novoProntuario);

        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Prontu√°rio salvo com sucesso!'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.pop(context);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erro ao salvar: $e'),
            backgroundColor: Colors.redAccent,
          ),
        );
      }
    }
  }

  // Seletor de data
  Future<void> _selecionarDataNascimento() async {
    final DateTime? selecionada = await showDatePicker(
      context: context,
      initialDate: DateTime(1990),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
      locale: const Locale('pt', 'BR'),
    );
    if (selecionada != null) {
      setState(() {
        _dataNascimentoController.text = _dateFormat.format(selecionada);
      });
    }
  }

  @override
  void dispose() {
    _nomeController.dispose();
    _dataNascimentoController.dispose();
    _cpfController.dispose();
    _enderecoController.dispose();
    _telefoneController.dispose();
    _emailController.dispose();
    _convenioController.dispose();
    _numeroCarteirinhaController.dispose();
    _alergiasController.dispose();
    _doencasController.dispose();
    _medicamentosController.dispose();
    _descricaoController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Novo Prontu√°rio'),
        backgroundColor: Colors.green,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                TextFormField(
                  controller: _nomeController,
                  decoration:
                      const InputDecoration(labelText: 'Nome completo'),
                  validator: (v) =>
                      v!.isEmpty ? 'Informe o nome completo' : null,
                ),
                TextFormField(
                  controller: _dataNascimentoController,
                  readOnly: true,
                  decoration: InputDecoration(
                    labelText: 'Data de nascimento',
                    suffixIcon: IconButton(
                      icon: const Icon(Icons.calendar_today),
                      onPressed: _selecionarDataNascimento,
                    ),
                  ),
                  validator: (v) =>
                      v!.isEmpty ? 'Informe a data de nascimento' : null,
                ),
                DropdownButtonFormField<String>(
                  value: _sexoSelecionado,
                  decoration: const InputDecoration(labelText: 'Sexo'),
                  items: const [
                    DropdownMenuItem(
                        value: 'Masculino', child: Text('Masculino')),
                    DropdownMenuItem(
                        value: 'Feminino', child: Text('Feminino')),
                    DropdownMenuItem(value: 'Outro', child: Text('Outro')),
                  ],
                  onChanged: (v) => setState(() => _sexoSelecionado = v!),
                ),
                TextFormField(
                  controller: _cpfController,
                  decoration: const InputDecoration(labelText: 'CPF'),
                  keyboardType: TextInputType.number,
                ),
                TextFormField(
                  controller: _enderecoController,
                  decoration:
                      const InputDecoration(labelText: 'Endere√ßo completo'),
                ),
                TextFormField(
                  controller: _telefoneController,
                  decoration: const InputDecoration(labelText: 'Telefone'),
                  keyboardType: TextInputType.phone,
                ),
                TextFormField(
                  controller: _emailController,
                  decoration: const InputDecoration(labelText: 'E-mail'),
                  keyboardType: TextInputType.emailAddress,
                ),
                TextFormField(
                  controller: _convenioController,
                  decoration: const InputDecoration(
                      labelText: 'Conv√™nio / Plano de Sa√∫de'),
                ),
                TextFormField(
                  controller: _numeroCarteirinhaController,
                  decoration: const InputDecoration(
                      labelText: 'N√∫mero da carteirinha'),
                ),
                TextFormField(
                  controller: _alergiasController,
                  decoration:
                      const InputDecoration(labelText: 'Alergias conhecidas'),
                ),
                TextFormField(
                  controller: _doencasController,
                  decoration: const InputDecoration(
                      labelText: 'Doen√ßas pr√©-existentes'),
                ),
                TextFormField(
                  controller: _medicamentosController,
                  decoration: const InputDecoration(
                      labelText: 'Medicamentos em uso'),
                ),
                TextFormField(
                  controller: _descricaoController,
                  decoration:
                      const InputDecoration(labelText: 'Descri√ß√£o / Observa√ß√µes'),
                  maxLines: 3,
                ),
                const SizedBox(height: 24),
                ElevatedButton.icon(
                  onPressed: _salvar,
                  icon: const Icon(Icons.save),
                  label: const Text('Salvar Prontu√°rio'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    minimumSize: const Size(double.infinity, 50),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

)
pubspec.yaml
(
  name: flutter_firebase
description: "A new Flutter project."

publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: ^3.9.0

dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^2.10.0
  cloud_firestore: ^4.8.0
  firebase_auth: ^4.4.0
  intl: ^0.19.0


  cupertino_icons: ^1.0.8

dev_dependencies:
  flutter_test:
    sdk: flutter

  flutter_lints: ^5.0.0

flutter:

  uses-material-design: true

)
